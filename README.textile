h1. LiveBlogLite

h2. Two light-weight plugins for publishing Blogsmith liveblog content

p. For the premiere, full-featured Liveblog Publisher, check out Joe Bartlett's "Liveblog Publisher":https://github.com/aoltech/liveblog-publisher.

p. This is a light-weight adaptation built for use with jQuery 1.5.2 and below.

p. LbL is two simple plugins. @$.liveBlogLiteApi@ fetches liveblog data using a postid and a domain and provides updates via a custom event. @$.liveBlogLiteUi@ is a simple, example implementation of the UI to respond to these updates that responds to new content, edits, comments, and deletions.

p. *Credit where credit is due:* Liveblog Publisher (LbP) was heavily consulted in writing this lighter version. Some patterns were even copied entirely.

h2. How to use @$.liveBlogLiteApi@ and @$.liveBlogLiteUi@

# LbL requires jQuery 1.5.2 or higher. (It may work with even older versions of jQuery - we haven't tested how low it will go, yet.)
# Download @dist/aol.livebloglite.min.js@ and add it to your project.
# Add the CSS to your page: @assets/prod/css/aol.livebloglite.css@. (These are sample styles only - feel free to use the @.scss@ file as reference for creating your own: @assets/scss/aol.livebloglite.scss@.
# Instantiate it using code along these lines:

bc..  $(document).ready(function () {
  // <div id="myLiveBlog"></div> is the container element in the markup
  var $myLiveBlog = $('#myLiveBlog').liveBlogLiteUi({
    // This is an example post on the Bootcamp blog
    postId: '20317028',
    // This is the URL to the Bootcamp blog
    url: 'http://bootcamp.aol.com/'
  });
});

h3. $.liveBlogLiteApi(options)

The liveBlogLiteApi plugin initiates a recurring poll of the Blogsmith Live Updater API. The first time, it receives all updates that currently exist on the live blog post. It begins checking the API every three seconds (or so) and only returns new or edited data. It provides this data to the jQuery object on which it's initiated as a custom "update" event.

h4. Example usage

bc.. // Initiate the Plugin
$('#myLiveBlog').liveBlogLiteApi({
    postId: 20334012,
    url: 'http://liveupdater.aol.com/'
});

// Output the data to the console
$('#myLiveBlog').bind('update', function (event, data) {
    console.log(data);
});

h4. Methods

Use methods by passing their name as an argument to the plugin.

bc. $('#myLiveBlog').liveBlogLiteApi('pause');

|_.Method|_.Description|
|pause|Pause updates from the API.|
|play|Resume updates from the API.|
|reset|Resets the API so that the next update will be like the first one, and will return all available data.|

h4. Available Options

|_.Property|_.Type|_.Default|_.Description|
|_.Required|
|url|string|null|The domain of the Blogsmith blog with your live blog post. Ex: http://liveupdater.aol.com|
|postId|number|null|The id of the live blog post, i.e. 20317028. Can be found in the URL string while editing the post in question.|
|_.Optional|
|begin|Date Object[1]|null|Sets a time for your live blog to begin polling the API for updates.|
|end|Date Object[1]|null|Sets a time for your live blog to stop polling the API for updates.|
|alive|boolean|true|If set to false, your live blog will only hit the API once to fetch all available data - it will not continue polling the API.|
|callbackPrefix|string|'lb_' + new Date().getTime() + '_'|The prefix used for the JSONP call. Hard to envision a need to change this, but here it is!|
|trafficPing|boolean|true|If true, polls the appropriate Blogsmith traffic URL every thirty seconds for analytics.|

fn1. Here's an easy "tool for creating a valid JS date string":http://codepen.io/anon/full/vFIfr.

h2. A Warning About Sandboxes

bq..  CMS can not, will not, has never, and will never dynamically update Sandbox'd Sites in Beta mode. Beta Mode is strictly for testing a site with the production level caching layer turned on. It is built this way to discourage people from trying to run production sites from the sandbox.

"If you wish to test a Live Update post, and have it update LIVE. 1. Turn off Beta mode. 2. Point the updater to the production api.
